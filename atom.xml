<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[秦鸿儒]]></title>
  <link href="http://davidqin.github.com/atom.xml" rel="self"/>
  <link href="http://davidqin.github.com/"/>
  <updated>2013-06-04T18:05:49+08:00</updated>
  <id>http://davidqin.github.com/</id>
  <author>
    <name><![CDATA[David Qin]]></name>
    <email><![CDATA[davidqhr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[awebook 使用memcache做性能优化]]></title>
    <link href="http://davidqin.github.com/blog/2013/05/30/improve-awebook-performance-with-cache/"/>
    <updated>2013-05-30T02:43:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/05/30/improve-awebook-performance-with-cache</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>页面上有5个下拉框，每个下拉框使用grouped_collection_select生成，有3000多个商品，所以每个下拉框中有3000多个options。由于需求，不能使用ajax分页加载这3000个商品。请求速度很慢很慢。</p>

<h2>猜想1</h2>

<p>过多的sql查询导致速度缓慢</p>

<h3>减少批次</h3>

<p>5个下拉框发出的sql应该是一样的，将这5次，减少为1次，查找相关的资料如下，说明这个优化是没有必要的。</p>

<pre>查询缓存是 Rails 的一个特性，它缓存了每一个数据库查询的结果集，这样如果 Rails 再次遇到那个请求中的同样的查询，它将会使用缓存的结果集而不是到数据库中继续查询。

第二次对数据库运行相同的查询，它实际上并不到数据库查询。第一次查询返回的结果存储在查询缓存（内存）中，第二次就直接从内存中读取。

然而，需要注意查询缓存在一个 action 的开始时创建，在 action 结束时清除，只持续在这个 action 的期间。如果希望在一个更持久的方式中存储查询结果，可以在 Rails 中使用低级别的缓存。
</pre>


<h3>缓存整个公司的商品列表</h3>

<p>经测验，action加载时间有增无减。由于业务逻辑原因，需要对商品进行分类显示，这样整个公司的商品列表缓存，需要在获取到所有缓存商品后，在内存中为商品分类，这个过程很耗时。得不偿失。</p>

<h3>缓存公司每一个商品分类的商品列表</h3>

<p>本地开发环境下测试结果如下，发现变化并不很明显，于是有了猜想2</p>

<p>之前</p>

<p><img src="images/before_cache.png" alt="Alt text" /></p>

<p>之后</p>

<p><img src="images/after_cache.png" alt="Alt text" /></p>

<h2>猜想2</h2>

<p>memcache的查询速度比sql快不了多少，过多次数的memcache read导致速度提升不多</p>

<h3>减少下拉框的数量</h3>

<p>逐渐从0-5修改下拉框的数量</p>

<p>action 的反映时间如下表</p>

<table>
<thead>
<tr>
<th></th>
<th> select quantity </th>
<th> Action Response Time(S) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 0               </td>
<td> 0.5                  </td>
</tr>
<tr>
<td></td>
<td> 1               </td>
<td> 1.06                 </td>
</tr>
<tr>
<td></td>
<td> 2               </td>
<td> 1.55                 </td>
</tr>
<tr>
<td></td>
<td> 3               </td>
<td> 1.92                 </td>
</tr>
<tr>
<td></td>
<td> 4               </td>
<td> 2.2                  </td>
</tr>
<tr>
<td></td>
<td> 5               </td>
<td> 2.5                  </td>
</tr>
</tbody>
</table>


<p>貌似说明了猜想，但是偶然间的一个测试，发现了问题</p>

<p>memcache查询次数不变，不执行grouped_collection_select函数，访问速度就会在0.5秒左右</p>

<h2>发现问题</h2>

<p>sql与memcache的read都不是问题，问题处在模版渲染上。</p>

<h2>解决方案</h2>

<p>缓存grouped_collection_select中生成的options的html文本。不使用grouped_collection_select，改为使用option_groups_from_collection_for_select与select的组合，这样就可以针对options的html进行缓存。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s2">&quot;XXX&quot;</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">10</span><span class="o">.</span><span class="n">minutes</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">option_groups_from_collection_for_select</span><span class="p">(</span> <span class="n">available_categories</span><span class="p">,</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:product_number</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">html_safe</span><span class="p">,</span> <span class="ss">:include_blank</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果，这个select出现在edit页面中，需要填写已有的数据，在调用select之前做一个简单的字符串替换</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">product</span>
</span><span class='line'>  <span class="n">product</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">product</span>
</span><span class='line'>  <span class="n">value</span>   <span class="o">=</span> <span class="n">product</span><span class="o">.</span><span class="n">number</span>
</span><span class='line'>  <span class="n">text</span>    <span class="o">=</span> <span class="n">product</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;&lt;option value=</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&lt;/option&gt;&quot;</span><span class="p">,</span> <span class="s2">&quot;&lt;option value=</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2"> selected=</span><span class="se">\&quot;</span><span class="s2">selected</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&lt;/option&gt;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要在product，以及product_category的create，destroy，update action中清空缓存</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;XXX&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails中的redirect和render]]></title>
    <link href="http://davidqin.github.com/blog/2013/05/05/redirect-and-render/"/>
    <updated>2013-05-05T23:29:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/05/05/redirect-and-render</id>
    <content type="html"><![CDATA[<p>kevin问rails中 redirect 和 render 到底有什么区别？</p>

<p>我打了一个比喻，自己感觉很贴切。虽然这两个东西差别很大，但是还是容易混淆。</p>

<h3>redirect</h3>

<p>有个人进屋子，要买面包。我呢，不是卖面包的，于是我说：“隔壁才是卖面包的，你因该到他那里去买才对（重定向），不过，你需要带上5元钱（请求应该带上的参数）。”于是呢，这个人就去了隔壁，带着5元钱，买到了面包，面包的口袋上写着XX面包店制作（从定向后的请求的url），客户满意了，屁颠屁颠的走了。</p>

<blockquote><p>以上描述中，客户开始去面包店之后的动作其实已经不属于redirect行为了。</p></blockquote>

<h3>render</h3>

<p>有个人进了屋子，要买面包。我呢，还不是卖面包的，但是一想，手里有做面包的家伙（template），心想，就给你做了吧。于是我说，给我点鸡蛋和面粉和10块钱（参数），我就可以给你做面包。他呢，按照我说的，给了我所有我要的东西。我就开始制作了，很快，面包做好了，我也给他弄个包装袋子，袋子上写着XX制作（本次请求的url），客户满意了，屁颠屁颠的走了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awebook部署中遇到的问题]]></title>
    <link href="http://davidqin.github.com/blog/2013/04/23/awebook-depoly-issues/"/>
    <updated>2013-04-23T11:58:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/04/23/awebook-depoly-issues</id>
    <content type="html"><![CDATA[<p>记录部署过程中遇到的一些比较耗时的问题。</p>

<h2>目录</h2>

<blockquote><p><a href="#deploy-upload">capistrano deploy名字空间中使用upload函数问题</a></p>

<p><a href="#diff-user-name">capistrano 本地用户名字与服务器不同</a></p>

<p><a href="#share-solr-index">solr索引没有放到shared中，更新代码导致索引丢失</a></p>

<p><a href="#solr-process">solr关闭时残留进程</a></p>

<p><a href="#rvm-multi-user">多用户的rvm</a></p>

<p><a href="#load-gem-error">passenger安装在global gemset，而app在其他gemset, app运行时gem加载不正确</a></p>

<p><a href="#etc-sudoers">脚本修改/etc/sudoers</a></p>

<p><a href="#edit-pass-in-script">脚本中以非交互方式修改服务器root密码</a></p>

<p><a href="#sudo-echo">echo与>或者>>配合使用权限问题</a></p>

<p><a href="#no-shell-user-execute-script">指定用户执行脚本，用户没有登陆权限</a></p></blockquote>

<h2><a id="deploy-upload">capistrano deploy名字空间中使用upload函数问题</a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 问题</span>
</span><span class='line'><span class="n">upload</span><span class="p">(</span><span class="s1">&#39;bin/rvm_install.sh&#39;</span><span class="p">,</span><span class="s1">&#39;~/rvm_install.sh&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">2</span> <span class="k">for</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过search发现，upload在deploy名字空间下是一个task。</p>

<pre><code>12:55 &lt;MojoLA&gt; I think I've discovered what's going on ... 
12:56 &lt;MojoLA&gt; when I call "upload" within the :deploy namespace, it's trying to call a task named deploy:upload 
12:57 &lt;MojoLA&gt; now I just have to figure out a way around it 
13:07 &lt;MojoLA&gt; yep, if you're inside the :deploy namespace "upload" is masked by a task of the same name 
13:08 &lt;MojoLA&gt; so if I call out to a different namespace, I can do my uploads from there 
</code></pre>

<h5>解决的办法</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 调用top下的upload</span>
</span><span class='line'><span class="n">top</span><span class="o">.</span><span class="n">upload</span><span class="p">(</span><span class="s1">&#39;bin/rvm_install.sh&#39;</span><span class="p">,</span><span class="s1">&#39;~/rvm_install.sh&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="diff-user-name">capistrano 本地用户名字与服务器不同</a></h2>

<p>capistrano默认使用当前系统当前用户名称作为脚本中的user，来登陆远程服务器。而我的本地的user是davidqhr而远程的是david，二者不一致，会出问题。有一种解决方案是在我每次执行task的时候，我手动输入用户名来指定我需要用哪一个用户登陆远程服务器，但是我并不想这个做，感觉很麻烦。</p>

<h5>解决办法</h5>

<p>写一个yml配置，根据配置是否存在，来决定是否修改登陆user。</p>

<h5>Capfile</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="s2">&quot;..&quot;</span><span class="p">,</span> <span class="s2">&quot;config.yml&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'>  <span class="n">user_config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="s2">&quot;..&quot;</span><span class="p">,</span> <span class="s2">&quot;config.yml&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="n">user_config</span><span class="o">[</span><span class="s2">&quot;server_user_name&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>yml</h5>

<pre><code>server_user_name: david
</code></pre>

<h2><a id="share-solr-index">solr索引没有放到shared中，更新代码导致索引丢失</a></h2>

<p>由于solr中的索引没有放到shared文件夹中，导致每次更新代码的时候，以前的搜索索引都会被清除。</p>

<h5>解决办法</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;start solr&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:start</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; RAILS_ENV=production bundle exec sunspot-solr start --port=8983 --data-directory=</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/solr/data --pid-dir=</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/pids --log-file=</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/solr/log --solr-home=</span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/solr&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 其他task同理</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="solr-process">solr关闭时残留进程</a></h2>

<p>在ubuntu下，通过<code>rake sunspot:solr:stop RAILS_ENV=production</code>关闭solr的时候，会有一个进程无法终止，反复开关solr几次后，会留下很多无用的进程。但是在MacOS中没有发现这个问题。</p>

<h5>解决办法</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;stop solr&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:stop</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; RAILS_ENV=production bundle exec sunspot-solr stop ...&quot;</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;ps aux | grep solr | awk &#39;{ print $2 }&#39; | head -n 1 | xargs sudo kill -9&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="rvm-multi-user">多用户的rvm</a></h2>

<p>用户需要加入rvm用户组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">NOTE</span><span class="p">:</span> <span class="no">To</span> <span class="no">Multi</span><span class="o">-</span><span class="no">User</span> <span class="n">installers</span><span class="p">,</span> <span class="n">please</span> <span class="k">do</span> <span class="no">NOT</span> <span class="n">forget</span> <span class="n">to</span> <span class="n">add</span> <span class="n">your</span> <span class="n">users</span> <span class="n">to</span> <span class="n">the</span> <span class="s1">&#39;rvm&#39;</span><span class="o">.</span>
</span><span class='line'>      <span class="no">The</span> <span class="n">installer</span> <span class="n">no</span> <span class="n">longer</span> <span class="n">auto</span><span class="o">-</span><span class="n">adds</span> <span class="n">root</span> <span class="ow">or</span> <span class="n">users</span> <span class="n">to</span> <span class="n">the</span> <span class="n">rvm</span> <span class="n">group</span><span class="o">.</span> <span class="no">Admins</span> <span class="n">must</span> <span class="k">do</span> <span class="n">this</span><span class="o">.</span>
</span><span class='line'>      <span class="no">Also</span><span class="p">,</span> <span class="n">please</span> <span class="n">note</span> <span class="n">that</span> <span class="n">group</span> <span class="n">memberships</span> <span class="n">are</span> <span class="no">ONLY</span> <span class="n">evaluated</span> <span class="n">at</span> <span class="n">login</span> <span class="n">time</span><span class="o">.</span>
</span><span class='line'>      <span class="no">This</span> <span class="n">means</span> <span class="n">that</span> <span class="n">users</span> <span class="n">must</span> <span class="n">log</span> <span class="n">out</span> <span class="k">then</span> <span class="n">back</span> <span class="k">in</span> <span class="n">before</span> <span class="n">group</span> <span class="n">membership</span> <span class="n">takes</span> <span class="n">effect!</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="load-gem-error">passenger安装在global gemset，而app在其他gemset, app运行时gem加载不正确</a></h2>

<p>rvm官网给出了解决办法，添加一个setup_load_paths.rb于config文件夹中，用来修改ENV[&#8216;GEM_PATH&#8217;]。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MY_RUBY_HOME&#39;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MY_RUBY_HOME&#39;</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;rvm&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">gems_path</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MY_RUBY_HOME&#39;</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="sr">/@/</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">sub</span><span class="p">(</span><span class="sr">/rubies/</span><span class="p">,</span><span class="s1">&#39;gems&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GEM_PATH&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">gems_path</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">gems_path</span><span class="si">}</span><span class="s2">@global&quot;</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;rvm&#39;</span>
</span><span class='line'>    <span class="no">RVM</span><span class="o">.</span><span class="n">use_from_path!</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;RVM gem is currently unavailable.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If you&#39;re not using Bundler at all, remove lines bellow</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BUNDLE_GEMFILE&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../Gemfile&#39;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="etc-sudoers">脚本修改/etc/sudoers</a></h2>

<p>修改sudoers需要使用系统命令visudo。但是如果要使用脚本修改/etc/sudoers时遇到了一些问题。</p>

<p>/etc/sudoers 这个文件的权限为440。root的自己也没有权限修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ll /etc/sudoers
</span><span class='line'>-r--r-----  1 root  wheel  1283  4 15 13:26 /etc/sudoers
</span></code></pre></td></tr></table></div></figure>


<p>于是尝试着添加root对这个文件写权限。但是，修改了这个文件的权限之后，sudo命令就会失效。原因是当/etc/sudoers的权限不为440时，sudo会报错。并且只能切换到root用户改回来。如果无法使用root密码，那就悲剧了。</p>

<h5>解决办法</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add blh group into /etc/sudoers</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;/tmp/sudoers.tmp&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>sudo cp /etc/sudoers /tmp/sudoers.tmp
</span><span class='line'>sudo chmod 666 /tmp/sudoers.tmp
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;%blh ALL=(ALL)NOPASSWD: ALL&quot;</span> &gt;&gt; /tmp/sudoers.tmp
</span><span class='line'>sudo visudo -c -f /tmp/sudoers.tmp
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> -eq <span class="s2">&quot;0&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>sudo cp /tmp/sudoers.tmp /etc/sudoers
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>sudo rm /tmp/sudoers.tmp
</span></code></pre></td></tr></table></div></figure>


<h2><a id="edit-pass-in-script">脚本中以非交互方式修改服务器root密码</a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">set_password</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;need a block&quot;</span> <span class="k">unless</span> <span class="nb">block_given?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">password</span> <span class="o">=</span> <span class="ss">Capistrano</span><span class="p">:</span><span class="ss">:CLI</span><span class="o">.</span><span class="n">password_prompt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="n">confirmation</span> <span class="o">=</span> <span class="ss">Capistrano</span><span class="p">:</span><span class="ss">:CLI</span><span class="o">.</span><span class="n">password_prompt</span><span class="p">(</span><span class="s2">&quot;confirmation: &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">confirmation</span> <span class="o">==</span> <span class="n">password</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">password</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;password and confirmation doesn&#39;t match!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">set_password</span> <span class="s2">&quot;Set root password: &quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">root_password</span><span class="o">|</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;printf &#39;</span><span class="si">#{</span><span class="n">root_password</span><span class="si">}</span><span class="se">\\</span><span class="s2">n</span><span class="si">#{</span><span class="n">root_password</span><span class="si">}</span><span class="se">\\</span><span class="s2">n&#39; |sudo passwd root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>优点在于非交互，适合用在脚本中。缺点在于密码会被显示在标准输出。</p>

<h2><a id="sudo-echo">echo与>或者>>配合使用权限问题</a></h2>

<p>经常会有将某些文本加入到某个文件中的需求，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;rvm use 1.9.3@gemset&quot;</span> &gt; ./.vimrc
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;export some_string&quot;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p>但是想要修改或创建的的文件权限不足的时候就会有问题，以下这种方式是<strong>无效</strong>的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s2">&quot;rvm use 1.9.3@gemset&quot;</span> &gt; ./.vimrc
</span><span class='line'><span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s2">&quot;export some_string&quot;</span> &gt;&gt; ~/.bashrc
</span><span class='line'>
</span><span class='line'><span class="c">#结果</span>
</span><span class='line'>-bash: xxx.xxx: Permission denied
</span></code></pre></td></tr></table></div></figure>


<p>无效的原因在于，sudo只作用于echo，而后面的<strong>></strong>与<strong>>></strong>仍是以当前用户权限执行。</p>

<h5>解决的办法</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 通过sh -c，使sudo提升的权限扩展到这个命令范围</span>
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s1">&#39;echo &quot;some_sring&quot; &gt;&gt; ~/.bashrc&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 使用tee</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;some_string&quot;</span> | sudo tee -a ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<h2><a id="no-shell-user-execute-script">指定用户执行脚本，用户没有登陆权限</a></h2>

<p>需求背景：需要使用一个无shell权限的用户，来执行程序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su -s /bin/bash -l -c <span class="s2">&quot;rvm use 1.9.3-p0@backup &amp;&amp; whenever --update-crontab&quot;</span> blh
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript_apply_call]]></title>
    <link href="http://davidqin.github.com/blog/2013/04/22/javascript-apply-call/"/>
    <updated>2013-04-22T16:49:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/04/22/javascript-apply-call</id>
    <content type="html"><![CDATA[<pre><code>foo.call(this, arg1,arg2,arg3) == foo.apply(this, arguments)==this.foo(arg1, arg2, arg3)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wget-a-website]]></title>
    <link href="http://davidqin.github.com/blog/2013/04/09/wget-a-website/"/>
    <updated>2013-04-09T20:01:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/04/09/wget-a-website</id>
    <content type="html"><![CDATA[<h5>原帖：</h5>

<p><a href="http://jnote.cn/blog/shell/wget-download.html">http://jnote.cn/blog/shell/wget-download.html</a></p>

<h5>需求：</h5>

<p>spine.js 的文档是需要翻墙的。用如下方式下载整个网站的资源：</p>

<pre><code>wget -r -p -k -nc -o down.log http://spinejs.com/docs/
</code></pre>

<h5>wget命令：</h5>

<ul>
<li><p>-U 修改agent，伪装成IE货firefox等</p>

<p> 如 &#8220;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; GTB5)&#8221;</p></li>
<li><p>-r 递归；对于HTTP主机，wget首先下载URL指定的文件，然后（如果该文 - 件是一个HTML文档的话）递归下载该文件所引用（超级连接）的所有文件（递 归深度由参数-l指定）。对FTP主机，该参数意味着要下载URL指定的目录中的所有文件，递归方法与HTTP主机类似。</p></li>
<li><p>-c 指定断点续传功能。实际上，wget默认具有断点续传功能，只有当你使用别的ftp工具下载了某一文件的一部分，并希望wget接着完成此工作的时候，才需要指定此参数。</p></li>
<li><p>-nc 不下载已经存在的文件</p></li>
<li><p>-np 表示不跟随链接，只下载指定目录及子目录里的东西；</p></li>
<li><p>-p 下载页面显示所需的所有文件。比如页面中包含了图片，但是图片并不在/yourdir目录中，而在/images目录下，有此参数，图片依然会被正常下载。</p></li>
<li><p>-k 修复下载文件中的绝对连接为相对连接，这样方便本地阅读。</p></li>
<li>-o 输出log</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby-off-rails]]></title>
    <link href="http://davidqin.github.com/blog/2013/03/27/ruby-off-rails/"/>
    <updated>2013-03-27T17:22:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/03/27/ruby-off-rails</id>
    <content type="html"><![CDATA[<p><a href="http://ruby-china.org/topics/9765">Ruby 社区应该去 Rails 化了</a></p>

<p>这其中有句不错的话：</p>

<p>Ruby社区的很多开发者长期以来待在Rails的舒适区里面，完全丧失了探索和尝试其他东西的勇气，其实在Rails的世界之外，Ruby社区的好东西还有很多很多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年]]></title>
    <link href="http://davidqin.github.com/blog/2013/01/01/2013/"/>
    <updated>2013-01-01T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/01/01/2013</id>
    <content type="html"><![CDATA[<p>2013，希望自己能多看点书，多写点代码，多洗几次衣服，多跟朋友出去玩几次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随笔]]></title>
    <link href="http://davidqin.github.com/blog/2012/12/23/essay/"/>
    <updated>2012-12-23T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/12/23/essay</id>
    <content type="html"><![CDATA[<p>回学校快一个月了，又重新回到的学校中的节奏中来。期末复习，依旧是老样子，复习复习，就总想拿出自己喜欢的那些书看看，而不是课本。想来想去，还是很潇洒的花干了自己所有的北京积蓄，如愿的用上了自己的air，完成了一个心愿，可是顿时感觉又空空的，其实应该给爸妈带点啥，不过自私占了上风啊，没办法，我感觉自己跟当年大闹东海的孙悟空有一拼，干软件的，想弄个趁手的兵器罢了，爹妈可别多心啊。又陷入了另一轮迷茫中，曾经迷茫大学怎么过，如今迷茫离开大学时我应该干什么。留下呢，还是不留下呢？我想要的是什么呢？我自己都不知道，也说不好。
如今的机遇是当年的google，还是一场竹篮打水，空梦一场？ery说的对，拼人品的时候到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[北京的日子]]></title>
    <link href="http://davidqin.github.com/blog/2012/11/30/working-in-beijing/"/>
    <updated>2012-11-30T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/11/30/working-in-beijing</id>
    <content type="html"><![CDATA[<p>其实今晚是有电影看的，看完去车站时间也够，但却一点心情也没有，最后还是决定在我做了近两个月的地方好好回味回味这段经历吧。</p>

<p>来豆瓣实习我感觉是挺疯狂的决定，但反过来一想呢，这也确实符合我自己的办事风格吧。收获颇丰：
认识很多英雄豪杰，感受到了自己的渺小。
拿到了第一份工资，虽然不多。
参加了平生第一个宣讲会，还是豆瓣的，还是在清华参加的，擦。
一个礼拜学习python，外加django然后上线的感觉，当然仅仅学会了点皮毛。
体会了自己做的产品上线时的紧张和手忙脚乱。
幸运的赶上了首届Pythonic Hackathon竞赛，然后成功以一个小白的身份狂虐队友（tony，博文），不过学习了flask框架，并且混到一件PyCon的T-shirt。
习惯了查文档，和看源码。</p>

<p>结识了一些基友：
萌到暴的代码洁癖患者tony同学
前端大神CB同学
ACM帝，c++控比卡丘同学
上知天文下晓算法的博文同学
辣（那）一年17岁的clj同学
style切可闹呵呵吼kelven同学
以及对我帮助颇多吉大亲学长：zzl同学。</p>

<p>吃了数不清的盖饭盖饭。。然后麦当劳麦当劳。。包子包子。。。</p>

<p>早上8点半前后出门，晚上10点多到住的地方，等公交一般要15分钟，堵车路上单程就要1个小时。然后一天天还美的跟快乐的小2B一样，真不知到自己的热情哪里来的。大概是厂里的妹子太好看了吧，也许是早上的包子比较好吃！！</p>

<p>感谢学校帮我忙活的朋友们，没你们，根本得瑟不到北京来。</p>

<p>先写到这，想起来再补上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再看《三个白痴》]]></title>
    <link href="http://davidqin.github.com/blog/2012/09/28/Three-Idiots/"/>
    <updated>2012-09-28T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/09/28/Three-Idiots</id>
    <content type="html"><![CDATA[<p>发现了这句话
追求卓越，成功就会出其不意找上门</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[豆瓣实习offer]]></title>
    <link href="http://davidqin.github.com/blog/2012/09/21/intern-at-douban/"/>
    <updated>2012-09-21T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/09/21/intern-at-douban</id>
    <content type="html"><![CDATA[<p>天时，地利，人和？
貌似所有的一切都有剧本
我呢，就是那个毫不知道剧本的主演</p>

<p>提交简历的第一天
没有音信的第二天
惊喜的接到hr电话的第三天
全力以赴的准备笔试的第四天
重温acm，重拾sql，重拾算法的第五天
专注的笔试的第六天
焦虑等待的第七天
绝望之际又一次看到希望的第八天
电话面试的第九天
同样的这天的下午，我被录取了。</p>

<p>短短的九天啊，估计我会记得很久，回味很久。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好的开始]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/24/good-start/"/>
    <updated>2012-08-24T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/24/good-start</id>
    <content type="html"><![CDATA[<p>今天，很开心，因为遇到了4名自己志同道合的人，想做校园网站
虽然我只是简短的交流了一个半小时，但是印象却极其的深刻</p>

<p>自己上半年写了jlu-zone，最后还是停掉了，代码是一方面，不过最总要的是我一个人无法支撑他走下去
忙活了三个月，从设计需求到代码实现，我自己干了绝大多的工作，我感觉很累</p>

<p>缺少人跟我讨论，缺少人给我意见，缺少人给我支持
最开始的激情流逝，虽然我到今晚之前我一直没打算放弃，但是也是打算从长计议</p>

<p>晚上的讨论我本来就似乎去听听而已，根本没报多大希望
敢想敢干的人，太少了，因为这个东西需要你付出很多</p>

<p>看了他们的图纸和创业报告，听他们表达了想法，我很激动
想法那么相似，相似的有点让我意外</p>

<p>很多人对我做的东西感到不屑，我也从未渴求过他们一丁点的理解
但是今晚的这份理解和默契对我来说真的太难得了</p>

<p>也许这是个好的开始，但愿这默契能一直持续下去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[天朝教育]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/09/china-education/"/>
    <updated>2012-08-09T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/09/china-education</id>
    <content type="html"><![CDATA[<p>看了看网上人们对天朝教育的态度
有很多人抒发雄心壮志，要改变教育制度
曾经我也有过</p>

<p>这是一个很严肃的事情，自己喳喳呼呼的什么也改变不了
于是我改变了目标
我要做一个在悲哀的天朝教育制度下
活出自我的人
在应试教育和我追寻的快乐之间 找到平衡点</p>

<p>背书做题考试照样
但是也努力挖掘生活
寻找自己热爱的东西</p>

<p>幸运的是，我知道自己想干什么
足够了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的对象模型]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/08/ruby-model-2/"/>
    <updated>2012-08-08T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/08/ruby-model-2</id>
    <content type="html"><![CDATA[<p>困惑了很久，一篇文章终于让我豁然开朗，终于不憋了！！！</p>

<p>出处：http://www.blogjava.net/killme2008/archive/2007/09/29/149452.html</p>

<p><a href="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_metaobj.png"><img src="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_metaobj-300x163.png" alt="" title="ch_class_metaobj" class="alignnone size-medium wp-image-402"></a></p>

<p>1、ruby在底层做了处理，instance的class在ruby层次是(instance),当查找的时候忽略了singleton类以及下面将要谈到的include模块的代理类，沿着继承链上查找
其中FL_TEST(cl,FL_SINGLETON)用于测试是否是singleton类，而TYPE(cl)==TL_ICLASS是否是包含模块的代理类，TL_ICLASS的I就是include的意思。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">VALUE</span>
</span><span class='line'><span class="n">rb_obj_class</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="n">VALUE</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rb_class_real</span><span class="p">(</span><span class="n">CLASS_OF</span><span class="p">(</span><span class="n">obj</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">VALUE</span>
</span><span class='line'><span class="n">rb_class_real</span><span class="p">(</span><span class="n">cl</span><span class="p">)</span>
</span><span class='line'><span class="n">VALUE</span> <span class="n">cl</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">FL_TEST</span><span class="p">(</span><span class="n">cl</span><span class="p">,</span> <span class="n">FL_SINGLETON</span><span class="p">)</span> <span class="o">||</span> <span class="n">TYPE</span><span class="p">(</span><span class="n">cl</span><span class="p">)</span> <span class="o">==</span> <span class="n">T_ICLASS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cl</span> <span class="o">=</span> <span class="n">RCLASS</span><span class="p">(</span><span class="n">cl</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">super</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、
图中类OtherClass继承Object，这个是显而易见的，不再多说。而Object、Class和Module这三个类是没办法通过API创建的，称为元类，他们的之间的关系如图所示，Object的class是Class,Module继承Object,而Class又继承Module，因此Class.kind_of? Object返回true,这个问题类似先有鸡，还是先有蛋的问题，是先有Object？还是先有Class?而c ruby的解决办法是不管谁先有，创建Object开始，接着创建Module和Class，然后分别创建它们的metaclass，从此整个Ruby的对象模型开始运转。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">rb_cObject</span> <span class="o">=</span> <span class="n">boot_defclass</span><span class="p">(</span><span class="s">&quot;Object&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'> <span class="n">rb_cModule</span> <span class="o">=</span> <span class="n">boot_defclass</span><span class="p">(</span><span class="s">&quot;Module&quot;</span><span class="p">,</span> <span class="n">rb_cObject</span><span class="p">);</span>
</span><span class='line'> <span class="n">rb_cClass</span> <span class="o">=</span> <span class="n">boot_defclass</span><span class="p">(</span><span class="s">&quot;Class&quot;</span><span class="p">,</span> <span class="n">rb_cModule</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">metaclass</span> <span class="o">=</span> <span class="n">rb_make_metaclass</span><span class="p">(</span><span class="n">rb_cObject</span><span class="p">,</span> <span class="n">rb_cClass</span><span class="p">);</span>
</span><span class='line'> <span class="n">metaclass</span> <span class="o">=</span> <span class="n">rb_make_metaclass</span><span class="p">(</span><span class="n">rb_cModule</span><span class="p">,</span> <span class="n">metaclass</span><span class="p">);</span>
</span><span class='line'> <span class="n">metaclass</span> <span class="o">=</span> <span class="n">rb_make_metaclass</span><span class="p">(</span><span class="n">rb_cClass</span><span class="p">,</span> <span class="n">metaclass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//(object.c)</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么当我们调用Class.class发生了什么？Class的klass其实指向的是(Class)，可根据上面的代码，我们知道会忽略这个(Class)，继续往上找就是(Module),同理找到(Object)，而(Object)继承自Class,显然Class的类仍然是Class，Class的类的类也是Class,多么有趣。同理，Object.class和Module.class都将是Class类。</p>

<p>3、
 再来看看include模块时发生的故事。include模块的过程如下图所示：
<a href="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_include.png"><img src="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_include.png" alt="" title="ch_class_include" class="alignnone size-full wp-image-403"></a></p>

<p>include模块，本质上是在对象或者类的klass和super之间插入了一个代理类iclass,这个代理类的方法表(m_table)和变量表(iv_table)分别指向了被包含的模块的方法表和变量表（通过指针，因此当包含的Module变化的时候，对象或者类也能相应变化），那么在查找类或者对象的class的时候，上面已经说明将忽略这些代理类。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby对象模型]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/08/ruby-model-1/"/>
    <updated>2012-08-08T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/08/ruby-model-1</id>
    <content type="html"><![CDATA[<p>摘抄《Ruby元编程》</p>

<p>读完这书，有种豁然开朗的感觉，尤其是那几个图片。
以下是书中对ruby对象模型的总结，一共7条，我这里写了6条，括号中为我的理解</p>

<p>只有一种对象——要么是普通对象，要么是模块</p>

<p>只有一种模块——可以是普通模块、类、单例类、eigenclass、代理类</p>

<p>只有一个方法——存在模块或类中
（所谓的类方法，无非是它eigenclass的实例方法）</p>

<p>每个对象（普通对象，类）都有自己的“真正的类”——要么是普通类，要么是eigenclass</p>

<p>除了BasicObject(1.8中为Object)无超类外，每个类只有一个超类
（这里有个很有趣的事，BasicObject的eigenclass的超类是Class）</p>

<p>一个对象的eigenclass的超类是这个对象的类；一个类的eigenclass的超类事这个类的超类的eigenclass。
（子类继承父类类方法的原理）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLH]]></title>
    <link href="http://davidqin.github.com/blog/2012/05/07/blh/"/>
    <updated>2012-05-07T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/05/07/blh</id>
    <content type="html"><![CDATA[<p><img class="alignnone" title="宝雷杭" src="http://l.ruby-china.org/photo/18017f0992bf7434227317fb2e2276a8.jpg" alt="" width="680" height="460"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ctrl+c & ctrl+v]]></title>
    <link href="http://davidqin.github.com/blog/2012/03/27/ctrlc-ctrlv/"/>
    <updated>2012-03-27T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/03/27/ctrlc-ctrlv</id>
    <content type="html"><![CDATA[<p><a href="http://codecampo.com/topics/13">http://codecampo.com/topics/13</a></p>

<p>对你的编程技术提高最有效的一件事是什么？回复的人中给了很多很不错的建议，我把他们总结了一下，十条，相信一定会对你有用。（注意：顺序是我自己按我的个人经验排的）</p>

<ol>
<li>和比自己聪明的能力比自己强的人工作。学习他们的代码，他们的做事方法，看一看那些人是怎么处理错误的。</li>
    <li>总是倾听别人怎么说，无论那个的资历和职位是什么样的。</li>
    <li>实践，实践，实践，总是不满意于一开始出来的事。</li>
    <li>多问问自己，现在在写什么代码？为什么要这样写成这样？还有没有更好的方法？</li>
    <li>学习多样的技术，多多比较他们，并一定要了解各种技术的优缺点。</li>
    <li>总是问别人问好的问题。</li>
    <li>多回头看看走过的路，做过的事，写过的程序，感觉一下他们有多烂。</li>
    <li>多读读那些大师写的书。</li>
    <li><strong>不要总坐在电脑前编程序，多做做运动，多到户外走走，和非技术人多接触，向他们学习。</strong></li>
    <li>把你的想法说出去，看看别人怎么回应的。从别人的回应中学习。</li>
</ol>


<p>除了这些，下面是我个人想给你的建议——</p>

<p>可能只能算精神，不能算方法。我以前也写过一篇《五个方法成为更好的程序员》，《十条不错的编程观点》，还有《优秀程序员的十个习惯》这几篇文章也能给你一些启发。</p>

<ol>
<li>热情。对编程充满热情。这种热情会导致强烈地专研精神，和努力的精神。专研精神相当重要，它是畏难情绪的天敌。</li>
    <li>知道。学习技术要“知其道，明其理”，而不仅仅只是了解知识。举例，为什么C++有“初始化例表”而Java却没有？为什么Java的没有多重继承？为会有了TCP还要UDP？对于一个事物，什么是好的，什么是不好的。不但要了解其表面，还要了解其思想。只有了解原始的初衷和目的，你才能真正“知道”。</li>
    <li>犯错。不犯错误永远没有经验，从自己的错误和别人的错误中学习，只有自己犯了错，才会真正明白。犯错不可怕，可怕的是不会总结只有真正的摸爬滚打过的人才是强人。技能和经验总是用错误去换来的。</li>
    <li>回顾。要多去回顾过去，看看历史上发生过的事。这样你才能明白事物的发展规律，从面才能了解未来的路。举例：单机
-> Client/Server -> 中间应用层 -> 多层结构 -> 分布式结构。 C -> C++ ->
Java，等等，等等。未来其实就在回顾过去之中。</li>
    <li>质疑。质疑精神很重要。质疑通常会导致不同意见甚至反对意见。也许你会质疑错，也许你会被质疑，但是你的认知也会因为不同的观点而变得完整。有所同有所不同（“同”为同意及相同），观点因为不同才能迸发出火花，事物也此而发展，世界因为不同而精彩。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[午饭间的小感受啊]]></title>
    <link href="http://davidqin.github.com/blog/2012/02/22/lunch/"/>
    <updated>2012-02-22T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/02/22/lunch</id>
    <content type="html"><![CDATA[<p>这本来好几天前就想写了，由于前几个晚上忙了点代码，今天就补上吧</p>

<p>算起来，kevin和frank都来了一个多礼拜了，那天午饭的时候，ery考了考他俩近期学的知识。有种似曾相识的感觉，想起了ery考我和mario的时候，那是在去吃饭的路上，考我的问题我都记得住，就是问我index的界面中，是怎么把所有的products显示出来的。当时语无伦次的瞎说了一通，就知道大概是个循环，然后就各种自欺欺人。</p>

<p>先说的是frank，他把rails的大概运行过程说了一遍，说的挺好，把前几天在路上问我和mairo的东西基本都说出来了，一惯的大舌头风格，还给ery讲了点ery教我的，然后我教他的东西，呵呵，我不禁偷笑。不过说的真挺好，感觉比我当初那个阶段理解的透彻。kevin说的也不错，就是嘴忒笨了，典型的想着说不出来型，表达的各种跑偏，各种名词各种瞎往上抬，各种地地道道的辽宁话：“就是XX，就是XX”。。我真心明白他想表达啥，真心想帮他表达以下，那感觉，真心憋啊。从kevin这几天的问题来看，他懂不少，只是知识不系统。呵呵，其实起步的快慢都不重要，关键要把东西弄扎实了，学透了就好，管你那年那月会的，遇到问题知道怎么处理就是好样的。</p>

<p>他们谈话间，我也小感叹了下时光飞逝啊～大半年过去了啊，感觉自己会了不少东西啊，也越来越体会到雄哥那句：“我啥也不会啊！”名言的真谛，就是眼界拓宽了，发现自己真的要学的好多，真的是啥也不会啊，会的就是皮毛，仅仅是皮毛，毫不夸张。时间感觉越来越少，要做的事情太多太多。还有就是自己心态平稳了不少，虽然性子依旧急躁，但感觉多少能有点改善吧～自己大学的轨迹也越来越清晰，不做啥宏伟大计划，积累才是硬道理，博观而约取，厚积而薄发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Git仓库中恢复已删除的分支或丢失的commit]]></title>
    <link href="http://davidqin.github.com/blog/2011/12/10/git-reflog/"/>
    <updated>2011-12-10T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2011/12/10/git-reflog</id>
    <content type="html"><![CDATA[<p>晚上临下班，差点一句话干掉3天的工作成果。。赶紧百度了下边找回数据的方法～</p>

<p> </p>

<p>在使用Git的过程中，有时可能会有一些误操作</p>

<p>比如：执行checkout -f 或 reset -hard 或 branch -d删除一个分支</p>

<p>结果造成本地（远程）的分支或某些commit丢失</p>

<p>可以通过reflog来进行恢复，前提是丢失的分支或commit信息没有被git gc清除</p>

<p>一般情况下，gc对那些无用的object会保留很长时间后才清除的</p>

<p>reflog是git提供的一个内部工具，用于记录对git仓库进行的各种操作</p>

<p>可以使用git reflog show或git log -g命令来看到所有的操作日志</p>

<p>恢复的过程很简单：</p>

<ol>
<li><p>通过git log -g命令来找到我们需要恢复的信息对应的commit_id，可以通过提交的时间和日期来辨别</p></li>
<li><p>通过git branch recover_branch commit_id 来建立一个新的分支</p></li>
</ol>


<p>这样，我们就把丢失的东西给恢复到了recover_branch分支上了</p>
]]></content>
  </entry>
  
</feed>
