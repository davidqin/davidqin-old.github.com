<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Boy~]]></title>
  <link href="http://davidqin.github.com/atom.xml" rel="self"/>
  <link href="http://davidqin.github.com/"/>
  <updated>2013-03-25T17:46:17+08:00</updated>
  <id>http://davidqin.github.com/</id>
  <author>
    <name><![CDATA[David Qin]]></name>
    <email><![CDATA[davidqhr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[抒情帖]]></title>
    <link href="http://davidqin.github.com/blog/2013/01/01/shu-qing-tie/"/>
    <updated>2013-01-01T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2013/01/01/shu-qing-tie</id>
    <content type="html"><![CDATA[<p>2013，希望自己能多看点书，多写点代码，多洗几次衣服，多跟朋友出去玩几次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随笔]]></title>
    <link href="http://davidqin.github.com/blog/2012/12/23/sui-bi--3/"/>
    <updated>2012-12-23T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/12/23/sui-bi&#8211;3</id>
    <content type="html"><![CDATA[<p>回学校快一个月了，又重新回到的学校中的节奏中来。期末复习，依旧是老样子，复习复习，就总想拿出自己喜欢的那些书看看，而不是课本。想来想去，还是很潇洒的花干了自己所有的北京积蓄，如愿的用上了自己的air，完成了一个心愿，可是顿时感觉又空空的，其实应该给爸妈带点啥，不过自私占了上风啊，没办法，我感觉自己跟当年大闹东海的孙悟空有一拼，干软件的，想弄个趁手的兵器罢了，爹妈可别多心啊。又陷入了另一轮迷茫中，曾经迷茫大学怎么过，如今迷茫离开大学时我应该干什么。留下呢，还是不留下呢？我想要的是什么呢？我自己都不知道，也说不好。
如今的机遇是当年的google，还是一场竹篮打水，空梦一场？ery说的对，拼人品的时候到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界上最肮脏的，莫过于自尊]]></title>
    <link href="http://davidqin.github.com/blog/2012/12/04/shuang/"/>
    <updated>2012-12-04T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/12/04/shuang</id>
    <content type="html"><![CDATA[<p>带着你的自尊，滚出我的生活！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[北京的日子]]></title>
    <link href="http://davidqin.github.com/blog/2012/11/30/bei-jing-de-ri-zi/"/>
    <updated>2012-11-30T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/11/30/bei-jing-de-ri-zi</id>
    <content type="html"><![CDATA[<p>其实今晚是有电影看的，看完去车站时间也够，但却一点心情也没有，最后还是决定在我做了近两个月的地方好好回味回味这段经历吧。</p>

<p>来豆瓣实习我感觉是挺疯狂的决定，但反过来一想呢，这也确实符合我自己的办事风格吧。收获颇丰：
认识很多英雄豪杰，感受到了自己的渺小。
拿到了第一份工资，虽然不多。
参加了平生第一个宣讲会，还是豆瓣的，还是在清华参加的，擦。
一个礼拜学习python，外加django然后上线的感觉，当然仅仅学会了点皮毛。
体会了自己做的产品上线时的紧张和手忙脚乱。
幸运的赶上了首届Pythonic Hackathon竞赛，然后成功以一个小白的身份狂虐队友（tony，博文），不过学习了flask框架，并且混到一件PyCon的T-shirt。
习惯了查文档，和看源码。</p>

<p>结识了一些基友：
萌到暴的代码洁癖患者tony同学
前端大神CB同学
ACM帝，c++控比卡丘同学
上知天文下晓算法的博文同学
辣（那）一年17岁的clj同学
style切可闹呵呵吼kelven同学
以及对我帮助颇多吉大亲学长：zzl同学。</p>

<p>吃了数不清的盖饭盖饭。。然后麦当劳麦当劳。。包子包子。。。</p>

<p>早上8点半前后出门，晚上10点多到住的地方，等公交一般要15分钟，堵车路上单程就要1个小时。然后一天天还美的跟快乐的小2B一样，真不知到自己的热情哪里来的。大概是厂里的妹子太好看了吧，也许是早上的包子比较好吃！！</p>

<p>感谢学校帮我忙活的朋友们，没你们，根本得瑟不到北京来。</p>

<p>先写到这，想起来再补上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再看《三个白痴》]]></title>
    <link href="http://davidqin.github.com/blog/2012/09/28/zai-kan-%E3%80%8A-san-ge-bai-chi-%E3%80%8B/"/>
    <updated>2012-09-28T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/09/28/zai-kan-《-san-ge-bai-chi-》</id>
    <content type="html"><![CDATA[<p>发现了这句话
追求卓越，成功就会出其不意找上门</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[豆瓣实习offer]]></title>
    <link href="http://davidqin.github.com/blog/2012/09/21/dou-ban-shi-xi-offer/"/>
    <updated>2012-09-21T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/09/21/dou-ban-shi-xi-offer</id>
    <content type="html"><![CDATA[<p>天时，地利，人和？
貌似所有的一切都有剧本
我呢，就是那个毫不知道剧本的主演</p>

<p>提交简历的第一天
没有音信的第二天
惊喜的接到hr电话的第三天
全力以赴的准备笔试的第四天
重温acm，重拾sql，重拾算法的第五天
专注的笔试的第六天
焦虑等待的第七天
绝望之际又一次看到希望的第八天
电话面试的第九天
同样的这天的下午，我被录取了。</p>

<p>短短的九天啊，估计我会记得很久，回味很久。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好的开始]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/24/hao-de-kai-shi/"/>
    <updated>2012-08-24T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/24/hao-de-kai-shi</id>
    <content type="html"><![CDATA[<p>今天，很开心，因为遇到了4名自己志同道合的人，想做校园网站
虽然我只是简短的交流了一个半小时，但是印象却极其的深刻</p>

<p>自己上半年写了jlu-zone，最后还是停掉了，代码是一方面，不过最总要的是我一个人无法支撑他走下去
忙活了三个月，从设计需求到代码实现，我自己干了绝大多的工作，我感觉很累</p>

<p>缺少人跟我讨论，缺少人给我意见，缺少人给我支持
最开始的激情流逝，虽然我到今晚之前我一直没打算放弃，但是也是打算从长计议</p>

<p>晚上的讨论我本来就似乎去听听而已，根本没报多大希望
敢想敢干的人，太少了，因为这个东西需要你付出很多</p>

<p>看了他们的图纸和创业报告，听他们表达了想法，我很激动
想法那么相似，相似的有点让我意外</p>

<p>很多人对我做的东西感到不屑，我也从未渴求过他们一丁点的理解
但是今晚的这份理解和默契对我来说真的太难得了</p>

<p>也许这是个好的开始，但愿这默契能一直持续下去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[web五子棋]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/22/web-wu-zi-qi/"/>
    <updated>2012-08-22T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/22/web-wu-zi-qi</id>
    <content type="html"><![CDATA[<p>web五子棋
算是自己学coffee的一个练习吧
顺带也了解了下什么是node.js
学了点websocket
地址：http://175.41.139.28:1234
代码：https://github.com/davidqin/gobang</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[天朝教育]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/09/tian-zhao-jiao-yu/"/>
    <updated>2012-08-09T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/09/tian-zhao-jiao-yu</id>
    <content type="html"><![CDATA[<p>看了看网上人们对天朝教育的态度
有很多人抒发雄心壮志，要改变教育制度
曾经我也有过</p>

<p>这是一个很严肃的事情，自己喳喳呼呼的什么也改变不了
于是我改变了目标
我要做一个在悲哀的天朝教育制度下
活出自我的人
在应试教育和我追寻的快乐之间 找到平衡点</p>

<p>背书做题考试照样
但是也努力挖掘生活
寻找自己热爱的东西</p>

<p>幸运的是，我知道自己想干什么
足够了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby对象模型]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/08/ruby-dui-xiang-mo-xing/"/>
    <updated>2012-08-08T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/08/ruby-dui-xiang-mo-xing</id>
    <content type="html"><![CDATA[<p>摘抄《Ruby元编程》</p>

<p>读完这书，有种豁然开朗的感觉，尤其是那几个图片。
以下是书中对ruby对象模型的总结，一共7条，我这里写了6条，括号中为我的理解</p>

<p>只有一种对象——要么是普通对象，要么是模块</p>

<p>只有一种模块——可以是普通模块、类、单例类、eigenclass、代理类</p>

<p>只有一个方法——存在模块或类中
（所谓的类方法，无非是它eigenclass的实例方法）</p>

<p>每个对象（普通对象，类）都有自己的“真正的类”——要么是普通类，要么是eigenclass</p>

<p>除了BasicObject(1.8中为Object)无超类外，每个类只有一个超类
（这里有个很有趣的事，BasicObject的eigenclass的超类是Class）</p>

<p>一个对象的eigenclass的超类是这个对象的类；一个类的eigenclass的超类事这个类的超类的eigenclass。
（子类继承父类类方法的原理）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 先有鸡还是先有蛋问题]]></title>
    <link href="http://davidqin.github.com/blog/2012/08/08/ruby--xian-you-ji-huan-shi-xian-you-dan-wen-ti/"/>
    <updated>2012-08-08T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/08/08/ruby&#8211;xian-you-ji-huan-shi-xian-you-dan-wen-ti</id>
    <content type="html"><![CDATA[<p>困惑了很久，一篇文章终于让我豁然开朗，终于不憋了！！！</p>

<p>出处：http://www.blogjava.net/killme2008/archive/2007/09/29/149452.html</p>

<p>附图
<a href="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_metaobj.png"><img src="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_metaobj-300x163.png" alt="" title="ch_class_metaobj" width="300" height="163" class="alignnone size-medium wp-image-402"></a></p>

<p>1、
ruby在底层做了处理，instance的class在ruby层次是(instance),当查找的时候忽略了singleton类以及下面将要谈到的include模块的代理类，沿着继承链上查找
其中FL_TEST(cl,FL_SINGLETON)用于测试是否是singleton类，而TYPE(cl)==TL_ICLASS是否是包含模块的代理类，TL_ICLASS的I就是include的意思。</p>

<p>&#8220;` c
VALUE
 rb_obj_class(obj)
 VALUE obj;
 {
 return rb_class_real(CLASS_OF(obj));
 }</p>

<p> VALUE
 rb_class_real(cl)
 VALUE cl;
 {
 while (FL_TEST(cl, FL_SINGLETON) || TYPE(cl) == T_ICLASS) {
 cl = RCLASS(cl)->super;
 }
 return cl;
 }
 &#8220;`</p>

<p>2、
图中类OtherClass继承Object，这个是显而易见的，不再多说。而Object、Class和Module这三个类是没办法通过API创建的，称为元类，他们的之间的关系如图所示，Object的class是Class,Module继承Object,而Class又继承Module，因此Class.kind_of? Object返回true,这个问题类似先有鸡，还是先有蛋的问题，是先有Object？还是先有Class?而c ruby的解决办法是不管谁先有，创建Object开始，接着创建Module和Class，然后分别创建它们的metaclass，从此整个Ruby的对象模型开始运转。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VALUE
</span><span class='line'> rb_obj_class(obj)
</span><span class='line'> VALUE obj;
</span><span class='line'> {
</span><span class='line'> return rb_class_real(CLASS_OF(obj));
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'> VALUE
</span><span class='line'> rb_class_real(cl)
</span><span class='line'> VALUE cl;
</span><span class='line'> {
</span><span class='line'> while (FL_TEST(cl, FL_SINGLETON) || TYPE(cl) == T_ICLASS) {
</span><span class='line'> cl = RCLASS(cl)->super;
</span><span class='line'> }
</span><span class='line'> return cl;
</span><span class='line'> }</span></code></pre></td></tr></table></div></figure>


<p>那么当我们调用Class.class发生了什么？Class的klass其实指向的是(Class)，可根据上面的代码，我们知道会忽略这个(Class)，继续往上找就是(Module),同理找到(Object)，而(Object)继承自Class,显然Class的类仍然是Class，Class的类的类也是Class,多么有趣。同理，Object.class和Module.class都将是Class类。</p>

<p>3、
 再来看看include模块时发生的故事。include模块的过程如下图所示：
<a href="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_include.png"><img src="http://qinhru-wordpress.stor.sinaapp.com/uploads/2012/08/ch_class_include.png" alt="" title="ch_class_include" class="alignnone size-full wp-image-403"></a></p>

<p>include模块，本质上是在对象或者类的klass和super之间插入了一个代理类iclass,这个代理类的方法表(m_table)和变量表(iv_table)分别指向了被包含的模块的方法表和变量表（通过指针，因此当包含的Module变化的时候，对象或者类也能相应变化），那么在查找类或者对象的class的时候，上面已经说明将忽略这些代理类。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLH]]></title>
    <link href="http://davidqin.github.com/blog/2012/05/07/blh/"/>
    <updated>2012-05-07T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/05/07/blh</id>
    <content type="html"><![CDATA[<p><img class="alignnone" title="宝雷杭" src="http://l.ruby-china.org/photo/18017f0992bf7434227317fb2e2276a8.jpg" alt="" width="680" height="460"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ctrl+c & ctrl+v]]></title>
    <link href="http://davidqin.github.com/blog/2012/03/27/ctrlc-ctrlv/"/>
    <updated>2012-03-27T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/03/27/ctrlc-ctrlv</id>
    <content type="html"><![CDATA[<p><a href="http://codecampo.com/topics/13">http://codecampo.com/topics/13</a></p>

<p>对你的编程技术提高最有效的一件事是什么？回复的人中给了很多很不错的建议，我把他们总结了一下，十条，相信一定会对你有用。（注意：顺序是我自己按我的个人经验排的）</p>

<ol>
<li>和比自己聪明的能力比自己强的人工作。学习他们的代码，他们的做事方法，看一看那些人是怎么处理错误的。</li>
    <li>总是倾听别人怎么说，无论那个的资历和职位是什么样的。</li>
    <li>实践，实践，实践，总是不满意于一开始出来的事。</li>
    <li>多问问自己，现在在写什么代码？为什么要这样写成这样？还有没有更好的方法？</li>
    <li>学习多样的技术，多多比较他们，并一定要了解各种技术的优缺点。</li>
    <li>总是问别人问好的问题。</li>
    <li>多回头看看走过的路，做过的事，写过的程序，感觉一下他们有多烂。</li>
    <li>多读读那些大师写的书。</li>
    <li><strong>不要总坐在电脑前编程序，多做做运动，多到户外走走，和非技术人多接触，向他们学习。</strong></li>
    <li>把你的想法说出去，看看别人怎么回应的。从别人的回应中学习。</li>
</ol>


<p>除了这些，下面是我个人想给你的建议——</p>

<p>可能只能算精神，不能算方法。我以前也写过一篇《五个方法成为更好的程序员》，《十条不错的编程观点》，还有《优秀程序员的十个习惯》这几篇文章也能给你一些启发。</p>

<ol>
<li>热情。对编程充满热情。这种热情会导致强烈地专研精神，和努力的精神。专研精神相当重要，它是畏难情绪的天敌。</li>
    <li>知道。学习技术要“知其道，明其理”，而不仅仅只是了解知识。举例，为什么C++有“初始化例表”而Java却没有？为什么Java的没有多重继承？为会有了TCP还要UDP？对于一个事物，什么是好的，什么是不好的。不但要了解其表面，还要了解其思想。只有了解原始的初衷和目的，你才能真正“知道”。</li>
    <li>犯错。不犯错误永远没有经验，从自己的错误和别人的错误中学习，只有自己犯了错，才会真正明白。犯错不可怕，可怕的是不会总结只有真正的摸爬滚打过的人才是强人。技能和经验总是用错误去换来的。</li>
    <li>回顾。要多去回顾过去，看看历史上发生过的事。这样你才能明白事物的发展规律，从面才能了解未来的路。举例：单机
-> Client/Server -> 中间应用层 -> 多层结构 -> 分布式结构。 C -> C++ ->
Java，等等，等等。未来其实就在回顾过去之中。</li>
    <li>质疑。质疑精神很重要。质疑通常会导致不同意见甚至反对意见。也许你会质疑错，也许你会被质疑，但是你的认知也会因为不同的观点而变得完整。有所同有所不同（“同”为同意及相同），观点因为不同才能迸发出火花，事物也此而发展，世界因为不同而精彩。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录下今天]]></title>
    <link href="http://davidqin.github.com/blog/2012/03/20/ji-lu-xia-jin-tian/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/03/20/ji-lu-xia-jin-tian</id>
    <content type="html"><![CDATA[<p>rails的controller基本通了
ajax提交表单会了
知道了一个函数time_ago_in_words，幸亏看了看官方文档
要不都准备手动实现了，官方文档很重要
不要闭门造车，读别人项目代码很重要</p>

<p>见了班任，拿到了课题，面部神态动作与语音系统
C++与openGL，貌似有点难，不过我喜欢挑战</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[午饭间的小感受啊]]></title>
    <link href="http://davidqin.github.com/blog/2012/02/22/wu-fan-jian-xiao-gan-a/"/>
    <updated>2012-02-22T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2012/02/22/wu-fan-jian-xiao-gan-a</id>
    <content type="html"><![CDATA[<p>这本来好几天前就想写了，由于前几个晚上忙了点代码，今天就补上吧</p>

<pre><code>算起来，kevin和frank都来了一个多礼拜了，那天午饭的时候，ery考了考他俩近期学的知识。有种似曾相识的感觉，想起了ery考我和mario的时候，那是在去吃饭的路上，考我的问题我都记得住，就是问我index的界面中，是怎么把所有的products显示出来的。当时语无伦次的瞎说了一通，就知道大概是个循环，然后就各种自欺欺人。

先说的是frank，他把rails的大概运行过程说了一遍，说的挺好，把前几天在路上问我和mairo的东西基本都说出来了，一惯的大舌头风格，还给ery讲了点ery教我的，然后我教他的东西，呵呵，我不禁偷笑。不过说的真挺好，感觉比我当初那个阶段理解的透彻。kevin说的也不错，就是嘴忒笨了，典型的想着说不出来型，表达的各种跑偏，各种名词各种瞎往上抬，各种地地道道的辽宁话：“就是XX，就是XX”。。我真心明白他想表达啥，真心想帮他表达以下，那感觉，真心憋啊。从kevin这几天的问题来看，他懂不少，只是知识不系统。呵呵，其实起步的快慢都不重要，关键要把东西弄扎实了，学透了就好，管你那年那月会的，遇到问题知道怎么处理就是好样的。

他们谈话间，我也小感叹了下时光飞逝啊～大半年过去了啊，感觉自己会了不少东西啊，也越来越体会到雄哥那句：“我啥也不会啊！”名言的真谛，就是眼界拓宽了，发现自己真的要学的好多，真的是啥也不会啊，会的就是皮毛，仅仅是皮毛，毫不夸张。时间感觉越来越少，要做的事情太多太多。还有就是自己心态平稳了不少，虽然性子依旧急躁，但感觉多少能有点改善吧～自己大学的轨迹也越来越清晰，不做啥宏伟大计划，积累才是硬道理，博观而约取，厚积而薄发。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Git仓库中恢复已删除的分支或丢失的commit]]></title>
    <link href="http://davidqin.github.com/blog/2011/12/10/cong-git-cang-ku-zhong-hui-fu-yi-shan-chu-de-fen-zhi-huo-diu-shi-de-commit/"/>
    <updated>2011-12-10T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2011/12/10/cong-git-cang-ku-zhong-hui-fu-yi-shan-chu-de-fen-zhi-huo-diu-shi-de-commit</id>
    <content type="html"><![CDATA[<p>晚上临下班，差点一句话干掉3天的工作成果。。赶紧百度了下边找回数据的方法～</p>

<p> </p>

<p>在使用Git的过程中，有时可能会有一些误操作</p>

<p>比如：执行checkout -f 或 reset -hard 或 branch -d删除一个分支</p>

<p>结果造成本地（远程）的分支或某些commit丢失</p>

<p>可以通过reflog来进行恢复，前提是丢失的分支或commit信息没有被git gc清除</p>

<p>一般情况下，gc对那些无用的object会保留很长时间后才清除的</p>

<p>reflog是git提供的一个内部工具，用于记录对git仓库进行的各种操作</p>

<p>可以使用git reflog show或git log -g命令来看到所有的操作日志</p>

<p>恢复的过程很简单：</p>

<ol>
<li><p>通过git log -g命令来找到我们需要恢复的信息对应的commit_id，可以通过提交的时间和日期来辨别</p></li>
<li><p>通过git branch recover_branch commit_id 来建立一个新的分支</p></li>
</ol>


<p>这样，我们就把丢失的东西给恢复到了recover_branch分支上了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[收获和感悟]]></title>
    <link href="http://davidqin.github.com/blog/2011/11/20/shou-huo-he-gan-wu/"/>
    <updated>2011-11-20T00:00:00+08:00</updated>
    <id>http://davidqin.github.com/blog/2011/11/20/shou-huo-he-gan-wu</id>
    <content type="html"><![CDATA[<p>夜深了，人静了，是时候放出我的日志了。</p>

<p>　　今天挺不寻常，严格来说是昨天。robbert从北京回来了，来了公司，大家都很高兴，ery晚上也慷慨请客。robbery应该是公司最给力的员工了，ery和他二人感情也不错，两人晚饭喝了点白的，看着ery脸红了起来，话也多了起来。还真别说，别人一般和我话多没一会我就烦，可是听ery的话，让我震惊不已，收获颇多啊。</p>

<p>　　借着酒，ery很客观的评价了我：排斥新技术，不太关心业内新闻，技术上专的深度还不错。没啥说的，说的很对，这也的确是自己的问题，排斥新技术不敢说，只能说自己懒。哎，也不是懒，主要是英语让我头疼，排斥新技术在我这的实质就是排斥英语，好吧，我终于承认了，即便我一直都不想承认。英语的确成为了我发展道路上的障碍，英文资料看的头疼啊，想研究有心无力啊。英语，是该哈下腰做点什么的时候了。</p>

<p>　　我曾经以为大学毕业了，找到工作了，薪水就是价值的最好体现，但是ery的想法很让我吃惊，人啊，就是想要在闭眼睛的那一天，回味自己一生，做了有意义的事，干了自己的事业，对得起身边的人们，就心满意足了。ery说自己当年去公司找实习机会，许多公司都拒绝，不要实习生。没办法只能自己楞抠，走了很多很多弯路。他这种感觉我很能理解，我是属于有问题弄不明白难受的要死的类型的，有很多次为解决一点小问题在百度和谷歌上点来点去一个下午，结果什么进展也没有，随说这种过程对自己有提高，但是也是感觉很浪费时间。公司不同了，有了各位师哥和ery的帮助，感觉问题解决快躲了，东西渐渐知道的也多了，学会处理问题的方法了。现在，就在练习自己独立解决问题，感觉进步了很多，也不再害怕面对不会的东西，毕竟我不行，有团队顶着~</p>

<p>　　我深信自己选择的路是没错的，无论是报考软件专业，还是大一开始到公司实习。小时候感激妈妈带我入门启蒙，大了些感谢付老师悉心教导，现如今就要感激ery对我无私帮助。自己仅仅是个大二的学生，丝毫没有感到自己在公司有什么重要作用，老板却把我们当正式员工一样对待，在此也感谢老板挺看重我的，我很荣幸能参与ery的创业。不想说啥大话，就是心理觉着，跟着ery挺踏实，好好学本事，努力做工作学习，做了有意义的事，干了自己的事业，对得起身边的人们，到那时我也就心满意足了。</p>

<p>　　哦，对了，公司下月要搬过来了，期待啊～</p>
]]></content>
  </entry>
  
</feed>
